grammar Slippers
	
  rule expression
	 before:some_text templated_expression space after:expression <ExpressionNode> / some_text
  end
  
  rule templated_expression
    delimiter foo delimiter <TemplatedExpressionNode>
  end
  
  rule foo
    apply_attribute_to_template / template / expression_option / attribute
  end
  
  rule apply_attribute_to_template 
    attribute apply_op template <ApplyAttributeToTemplateNode>
  end
  
  rule template
    known_template / anonymous_template
  end
  
  rule known_template
    template_path brackets <TemplateNode>
  end
  
  rule anonymous_template
    "{" anonymous_template_words "}" <AnonymousTemplateNode>
  end
	  
  rule attribute
  	 anything_except_keywords <AttributeToRenderNode>
  end
  
  rule expression_option
    attribute:anything_except_keywords ';' space null_subtitute:('null="' nulls:anything_except_keywords '"')? (",")? space seperator_value:('seperator="' seps:anything_except_keywords '"' )?  <AttributeWithExpressionOptionNode>
  end
  
  rule seperators
    'seperator="' seperator_value:anything_except_keywords '"' {
      def eval
        seperator_value.to_s
      end
    }
  end
  
  rule null_values
    'null="' null_subtitute:anything_except_keywords '"' {
      def eval
        null_subtitute.to_s
      end
    }
  end
	
  rule some_text
    not_delimiter* {
 	    def eval(*args)
   	   to_s
   	  end
      def to_s
        text_value
      end
    }
  end
  
  rule anonymous_template_words
    not_curly* {
      def to_s
        text_value
      end
    }
  end
	
  rule template_path
    anything_except_keywords {
      def to_s
        text_value
      end
    }
  end
    
  rule anything_except_keywords
    not_keyword* {
 	    def eval(*args)
   	   to_s
   	  end
      def to_s
        text_value
      end
    }
  end
  
  rule word_with_underscore
    word ("_" word)*
  end
  
  rule word
	[a-zA-Z]+ {
      def to_s
        text_value
      end
      }
  end
	
  rule space
    ' '* {
        def eval(object_to_render=nil, template_group=nil)
          to_s
        end
        def to_s
            text_value
        end
      }
  end
  
  rule apply_op
   ':' {
      def to_s
        text_value
      end
   }
  end
  
  rule delimiter
   '$' {
      def to_s
        text_value
      end
   }
  end
    
  rule brackets
   '()' {
      def to_s
        text_value
      end
   }
  end
  
  rule escape 
    '\\'
  end
  
  rule not_delimiter 
    escape delimiter / !delimiter . {
      def to_s
        text_value
      end
    }
  end

  rule not_apply_op 
    !apply_op . {
      def to_s
        text_value
      end
    }
  end
  
  rule not_keyword
  !(apply_op / delimiter / brackets / ';' / '"') . {
    def to_s
      text_value
    end
  }
  end
  
  rule not_curly
    !("{" / "}") . {
      def to_s
        text_value
      end
    }
  end
	
end