grammar Slippers
	
	rule expression
	 before:sentance templated_expression space after:sentance {
 	  def eval(object_to_render, subtemplate={})
 	    before.eval + templated_expression.eval(object_to_render, subtemplate) + after.eval
	    end
 	} / sentance
  end
  
  rule templated_expression
    "$" foo "$" {
   	  def eval(object_to_render, subtemplate={})
   	    foo.eval(object_to_render, subtemplate)
  	    end
   	} 
  end
  
  rule foo
    apply_attribute_to_template / template / attribute
  end
  
  rule apply_attribute_to_template 
    attribute apply_op template {
      def eval(object_to_render, subtemplates)
        subtemplate = subtemplates[:template]
        SlippersParser.new.parse(subtemplate.template).eval(attribute.eval(object_to_render), subtemplate.subtemplates)
      end
    }
  end
  
  rule template
    word "()" {
      def eval(object_to_render, subtemplates={})
        subtemplate = subtemplates[:template]
        SlippersParser.new.parse(subtemplate.template).eval(object_to_render, subtemplate.subtemplates)
      end
    }
  end
	  
  rule attribute
  	word {
  	  def eval(object_to_render, subtemplate={})
  	    object_to_render.send text_value
	    end
  	}
  end
	
	rule sentance
    possible_text* {
  		def eval(object_to_render=nil, subtemplate={})
  		  text_value
  		end
  	}	
  end
  
  rule possible_text 
    space word space
  end
  
	rule word
		[a-zA-Z]+
	end
	
	rule space
      ' '*
  end
  
  rule apply_op
   ':'
 end
	
end