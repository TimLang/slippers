grammar Slippers
	
	rule expression
	 before:some_text templated_expression space after:expression {
 	  def eval(object_to_render, subtemplate={})
 	    before.eval + templated_expression.eval(object_to_render, subtemplate) + space.eval + after.eval(object_to_render, subtemplate)
	    end
 	} / some_text
  end
  
  rule templated_expression
    "$" foo "$" {
   	  def eval(object_to_render, subtemplate={})
   	    foo.eval(object_to_render, subtemplate)
  	    end
   	} 
  end
  
  rule foo
    apply_attribute_to_template / template / attribute
  end
  
  rule apply_attribute_to_template 
    attribute apply_op template {
      def eval(object_to_render, subtemplates)
        subtemplate = subtemplates[template.to_sym]
        SlippersParser.new.parse(subtemplate.template).eval(attribute.eval(object_to_render), subtemplate.subtemplates)
      end
    }
  end
  
  rule template
    word "()" {
      def eval(object_to_render, subtemplates={})
        subtemplate = subtemplates[to_sym]
        SlippersParser.new.parse(subtemplate.template).eval(object_to_render, subtemplate.subtemplates)
      end
      
      def to_sym
        word.to_s.to_sym
      end
    }
  end
	  
  rule attribute
  	word {
  	  def eval(object_to_render, subtemplate={})
  	    object_to_render.send text_value
	    end
  	}
  end
	
	rule some_text
    not_delimiter* {
  		def eval(object_to_render=nil, subtemplate={})
  		  text_value
  		end
  	}	
  end
  
  rule not_delimiter 
    !"$" .
  end
	
	rule word
		[a-zA-Z]+ {		  
	    def to_s
	      text_value
      end
		}
	end
	
	rule space
      ' '* {
        def eval(object_to_render=nil, subtemplate={})
          text_value
        end
      }
  end
  
  rule apply_op
   ':'
 end
	
end